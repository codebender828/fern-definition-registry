# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

ids: 
  - GeneratorTaskId

types:
  GeneratorConfig: 
    properties: 
      id: string
      generatorVersion: string
      customConfig: unknown
      willDownloadFiles: boolean
  
  RegistryOverrides: 
    properties: 
      npm: optional<NpmRegistryOverride>
      maven: optional<MavenRegistryOverride>
  
  NpmRegistryOverride: 
    properties: 
      registryUrl: string
      auth: optional<RegistryAuth>
      scope: string
  
  MavenRegistryOverride: 
    properties: 
      registryUrl: string
      auth: optional<RegistryAuth>
      group: string
  
  RegistryAuth: 
    properties: 
      username: string
      password: string
  
  FernApiDefinition: 
    properties: 
      files: list<File>
  
  File: 
    properties: 
      path: string
      contents: string

  DraftRequest: 
    properties:
      generators: list<GeneratorConfig>
      apiDefinition: FernApiDefinition
  DraftResponse: 
    properties: 
      taskIds: list<GeneratorTaskId>
      draftVersion: string
  
  ReleaseRequest: 
    properties:
      generators: list<GeneratorConfig>
  ReleaseResponse: 
    properties: 
      taskIds: list<GeneratorTaskId>
  
  VersionsPage: {}

  VersionType: 
    enum: 
      - DRAFT
      - PROMOTED
      - RELEASE
  VersionInfo: 
    properties: 
      version: string
      type: VersionType
      createdTime: datetime
      generatorTaskIds: list<GeneratorTaskId>
      
services:
  http:
    FernDefinitionRegistryService:
      auth: none
      base-path: /fdr
      endpoints:
        draft:
          method: POST
          path: /{orgName}/{apiName}/draft
          path-parameters:
            orgName: string
            apiName: string
          request: DraftRequest
          response: DraftResponse
          errors: 
            - OrgDoesNotExist

        promote:
          method: POST
          path: /{orgName}/{apiName}/{draftVersion}/promote
          path-parameters:
            orgName: string
            apiName: string
            draftVersion: string
          errors: 
            - DraftVersionDoesNotExist
            - OrgDoesNotExist

        release:
          method: POST
          path: /{orgName}/{apiName}/{releaseVersion}/release
          path-parameters:
            orgName: string
            apiName: string
            releaseVersion: string
          request: ReleaseRequest
          response: ReleaseResponse
          errors: 
            - OrgDoesNotExist
        
        getVersions: 
          method: GET
          path:  /{orgName}/{apiName}/versions
          path-parameters:
            orgName: string
            apiName: string
          docs: Returns API versions from most to least recent. 
          query-parameters: 
            isRelease:
              type: optional<boolean>
              docs: Defaults to true
          response: Page<Version>
        
        getVersionInfo: 
          method: GET
          path:  /{orgName}/{apiName}/{version}
          path-parameters:
            orgName: string
            apiName: string
            version: string
          response: VersionInfo

errors:
  DraftVersionDoesNotExist: 
    http: 
      statusCode: 404
  OrgDoesNotExist:
    http: 
      statusCode: 404